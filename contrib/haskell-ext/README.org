#+TITLE: Haskell contribution layer for Spacemacs

[[file:img/haskell.png]]

* Table of Contents                                                   :TOC@4:
 - [[#description][Description]]
   - [[#features][Features:]]
 - [[#key-bindings][Key bindings]]
 - [[#the-ideal-haskell-setup][the ideal haskell setup]]
 - [[#old-haskell-setup-notes][old haskell setup notes]]
   - [[#emacs-dot-changes][emacs dot changes]]
   - [[#new-emacs-packages][new emacs packages]]

* Description
This layer adds extensions to the haskell layer.

** TODO Features:
SCHEDULED: <2015-11-06 Fri>
- hrefactor
- haskell-ext
- mmm-mode tweaks, for rendering markdown within a *.hs, *.hls
- yasnippet snippets `lang` and `opt`

* Key bindings
All Haskell specific bindings are prefixed with the major-mode leader
~SPC m~.

Most extensions have a keybinding prefixed by ~SPC m~:

| Key Binding | Description                               |
|-------------+-------------------------------------------|
| ~SPC m f~   | flycheck                                  |
| ~SPC m i~   | repl                                      |
| ~SPC m m~   | imports                                   |
| ~SPC m r~   | refactoring                               |
| "mfc"       | 'flycheck-haskell-configure               |
| "mff        | 'flycheck-buffer                          |
| "mfv        | 'flycheck-verify-setup                    |
| "mfh        | 'helm-flycheck                            |
| "mft        | 'flycheck-mode                            |
| "mfi        | 'haskell-ext-flycheck-insert-lints        |
| "mfs        | 'flycheck-select-checker                  |
| "mil        | 'haskell-process-load-file                |
| "mik        | 'haskell-interactive-kill                 |
| "mic        | 'haskell-interactive-clear                |
| "mir        | 'haskell-process-restart                  |
| "mib        | 'haskell-interactive-bring                |
| "mis        | 'haskell-interactive-switch               |
| "ml         | 'haskell-process-load-or-reload           |
| "mma        | 'haskell-align-imports                    |
| "mmn        | 'haskell-navigate-imports                 |
| "mms        | 'haskell-sort-imports                     |
| "mrd        | 'hindent/reformat-decl                    |
| "mrt        | 'haskell-ext-flycheck-insert-type-binding |
| "mv         | 'mmm-parse-buffer                         |
| "mrf        | 'hrefactor-flycheck-fix-all               |
| "mrp        | 'hrefactor-flycheck-fix-hlints-at-point   |
| "mrr        | 'hrefactor-reformat-module                |
| "mra        | 'hrefactor-all                            |

* TODO the ideal haskell setup
SCHEDULED: <2015-11-07 Sat>

The ideal haskell setup
===

This isn't even close, but, compared to the recent past, the emacs-haskell tool kit has gotten pretty sweet.

installed haskell packages
---

The haskell specific packages installed are

-   haskell-mode
-   ghc (ghc-mod)
-   shm
-   hindent
-   flycheck-haskell
-   flycheck-ghcmod
-   company-ghc
-   helm-ghc

and the known but not installed are

-   hdevtools
-   flycheck-hdevtools
-   flymake-haskell-multi
-   ac-haskell-process
-   ghc-imported-from
-   ghci-completion
-   hi2
-   hippie-expand-haskell
-   stylish-haskell

a haskell checklist
---

I'm slowly refactoring the haskell keymap into my ideal of a haskell ide.

-   [-] drafting
    -   [ ] completion (via ido?)
    -   [X] reformat at buffer level
    -   [ ] shm
    -   [ ] cleanup imports
    -   [ ] cleanup pragmas
    -   [ ] export list creation

-   [ ] flychecking
    -   [ ] accept (all) hlints
    -   [ ] insert (all) types (without forall's)
    -   [ ] fill type holes

-   [ ] refactoring
    -   [ ] where <-> let
    -   [ ] top-line <-> where functions
    -   [ ] macro rearrangement support
    -   [ ] flag unused code
    -   [ ] haddockify comments
    -   [ ] template haskell re-ordering

-   [ ] interactive
    -   [ ] history available (ido, helm)
    -   [ ] automatic entry & exit with one key press
    -   [ ] multiline support

-   [ ] documentation
    -   [ ] hoogle/hayoo via w3m (or in minibuffer!)
    -   [ ] haddock via w3m
    -   [ ] info and type in minibuffer
    -   [ ] following a tree

-   [ ] cabal file
    -   [ ] create a cabal project file from inspection of a code base
    -   [ ] insert missing libraries (with proper bounds)
    -   [ ] flag/delete unused libraries
    -   [ ] project details <-> cabal file (resolution)

-   [ ] comments
    -   [ ] haddock support
    -   [ ] markdown support

-   [ ]  [pandoc](http://joostkremers.github.io/pandoc-mode/) conversion
    -   [ ] hs -> html
    -   [ ] hs -> markdown
    -   [ ] hs -> haddock html(?)

-   [ ] helm and ido integration

-   [ ] project management
    -   [ ] tags
    -   [ ] projectile needed?


* TODO old haskell setup notes
SCHEDULED: <2015-11-07 Sat>
https://github.com/chrisdone/chrisdone-emacs/blob/master/config/haskell.el

haskell-process-stack
haskell-process-do-stack


(setq
        ghc-ghc-options '("-fno-warn-missing-signatures")
        haskell-compile-cabal-build-command "cd %s && stack build"
        haskell-process-type 'stack-ghci
        haskell-interactive-popup-errors nil
        haskell-process-args-stack-ghci '("--ghc-options=-ferror-spans" "--with-ghc=ghci-ng")
        haskell-process-path-ghci "stack"
)

https://github.com/haskell/haskell-mode/issues/889

((haskell-mode
  . ((haskell-process-type . ghci)
     (haskell-process-path-ghci . "stack")
     (haskell-process-args-ghci . ("ghci" "--with-ghc" "ghci-ng")))))



(require 'haskell-mode)
(require 'hindent)
(require 'haskell-process)
(require 'haskell-simple-indent)
(require 'haskell-interactive-mode)
(require 'haskell)
(require 'haskell-font-lock)
(require 'haskell-debug)
(require 'sgml-mode)
(require 'css-mode)
(require 'ghci-script-mode)


- [ ] stack
stack build --executable-profiling

https://github.com/commercialhaskell/stack/blob/master/doc/GUIDE.md


- [ ] flycheck

haskell-stack-ghc

http://www.flycheck.org/manual/latest/Supported-languages.html



(flycheck-define-checker haskell-stack
  "A Haskell syntax and type checker using ghc.

See URL `http://www.haskell.org/ghc/'."
  :command ("stack" "ghc" "--" "-Wall" "-fno-code"
            (option-flag "-no-user-package-db"
                         flycheck-ghc-no-user-package-database)
            (option-list "-package-db" flycheck-ghc-package-databases)
            (option-list "-i" flycheck-ghc-search-path concat)
            ;; Include the parent directory of the current module tree, to
            ;; properly resolve local imports
            (eval (concat
                   "-i"
                   (flycheck-module-root-directory
                    (flycheck-find-in-buffer flycheck-haskell-module-re))))
            (option-list "-X" flycheck-ghc-language-extensions concat)
            (eval flycheck-ghc-args)
            "-x" (eval
                  (pcase major-mode
                    (`haskell-mode "hs")
                    (`literate-haskell-mode "lhs")))
            source)
  :error-patterns
  ((warning line-start (file-name) ":" line ":" column ":"
            (or " " "\n    ") "Warning:" (optional "\n")
            (message
             (one-or-more " ") (one-or-more not-newline)
             (zero-or-more "\n"
                           (one-or-more " ")
                           (one-or-more not-newline)))
            line-end)
   (error line-start (file-name) ":" line ":" column ":"
          (or (message (one-or-more not-newline))
              (and "\n"
                   (message
                    (one-or-more " ") (one-or-more not-newline)
                    (zero-or-more "\n"
                                  (one-or-more " ")
                                  (one-or-more not-newline)))))
          line-end))
  :error-filter
  (lambda (errors)
    (flycheck-sanitize-errors (flycheck-dedent-error-messages errors)))
  :modes (haskell-mode literate-haskell-mode)
  :next-checkers ((warning . haskell-hlint)))

I had to disable the haskell-ghc check by putting it into the flycheck-disabled-checkers list, and add the last bit to my Haskell initialization function:

(defun haskell-mode-setup-hook ()
  (interactive)
  (progn
    (turn-on-haskell-indent) ; haskell stuff
    (turn-on-haskell-doc)
    (turn-on-haskell-decl-scan)
    (interactive-haskell-mode)
    (flycheck-select-checker 'haskell-stack)))




** emacs dot changes


- [ ] ghci-ng

  cabal repl --with-ghc=ghci-ng
  - uses
  - loc-at
  - type-at  haskell-mode-show-type-at

- [ ] shm keys

  (define-key haskell-mode-map (kbd "C-<return>") 'haskell-simple-indent-newline-indent)
  (define-key haskell-mode-map (kbd "C-<right>") 'haskell-move-right)
  (define-key haskell-mode-map (kbd "C-<left>") 'haskell-move-left)

  (define-key shm-map (kbd "C-c C-p") 'shm/expand-pattern)
  (define-key shm-map (kbd ",") 'shm-comma-god)
  (define-key shm-map (kbd "C-c C-s") 'shm/case-split)
  ;;(define-key shm-map (kbd "SPC") 'shm-contextual-space)
  (define-key shm-map (kbd "C-\\") 'shm/goto-last-point)
  (define-key shm-map (kbd "C-c C-f") 'shm-fold-toggle-decl)
  (define-key shm-map (kbd "C-c i") 'shm-reformat-decl)

- [ ] auto-complete

  ;; Do this to get a variable in scope
  (auto-complete-mode)
  (defun hc-ac-haskell-candidates (prefix)
    (let ((cs (haskell-process-get-repl-completions (haskell-process) prefix)))
      (remove-if (lambda (c) (string= "" c)) cs)))
  (ac-define-source haskell
    '((candidates . (hc-ac-haskell-candidates ac-prefix))))
  (defun hc-haskell-hook ()
    (add-to-list 'ac-sources 'ac-source-haskell))
  (add-hook 'haskell-mode-hook 'hc-haskell-hook)

  ;; auto-complete-mode so can interact with inferior haskell and popup completion
  ;; I don't always want this.  Just turn on when needed.
  ;;(add-hook 'haskell-mode-hook (lambda () (auto-complete-mode 1)))

- [ ] cabal
  - flycheck

** new emacs packages

ghc
ghc-imported-from
ghci-completion
haskell-emacs
ac-haskell-sources
